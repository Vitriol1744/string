// implementation of std::allocator in header <memory> to be used with https://github.com/ilobilo/libstdcxx-headers

#pragma once

// include <memory> from freestanding libstdcxx too
#include_next <memory>

namespace std
{
    template<typename Type>
    struct allocator
    {
        using value_type = Type;
        using pointer = Type *;
        using const_pointer = const Type *;
        using size_type = size_t;
        using difference_type = ptrdiff_t;

        constexpr allocator() noexcept = default;

        template<typename U>
        constexpr allocator(const allocator<U> &other) noexcept { }

        [[nodiscard]] constexpr Type *allocate(size_t size)
        {
            /* allocate and return `size * sizeof(Type)` bytes */
        }

        constexpr void deallocate(Type *ptr, size_t size)
        {
            /* deallocate/free `ptr` with `size * sizeof(Type)` bytes */
        }

        friend constexpr bool operator==(const allocator &, const allocator &) noexcept
        {
            return true;
        }
    };
} // namespace std